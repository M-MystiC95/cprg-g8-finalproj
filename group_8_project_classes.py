# -*- coding: utf-8 -*-
"""Group 8: Project: Classes

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1GpCg_3aIBqy75dRBfZxlM941-ZVN5iv3
"""

class Doctor:
    #Constructor
    def __init__(self, doctor_id="", name="", specialization="", working_time="", qualification="", room_number=""):
        self.doctor_id = doctor_id
        self.name = name
        self.specialization = specialization
        self.working_time = working_time
        self.qualification = qualification
        self.room_number = room_number

    def getDoctorId(self): #Getter for Doctor ID
        return self.doctor_id

    def setDoctorId(self, new_id): #Setters for Doctor ID
        self.doctor_id = new_id

    def getName(self): #Getter for Doctor's Name
        return self.name

    def setName(self, new_name): #Setters for Doctor's Name
        self.name = new_name

    def getSpecialization(self): #Getter for Doctor's Specialization
        return self.specialization

    def setSpecialization(self, new_specialization): #Setters for Doctor's Specialization
        self.specialization = new_specialization

    def getWorkingTime(self): #Getter for Doctor's Working time
        return self.working_time

    def setWorkingTime(self, new_working_time): #Setters for Doctor's Working time
        self.working_time = new_working_time

    def getQualification(self): #Getter for Doctor's Qualifcation
        return self.qualification

    def setQualification(self, new_qualification): #Setters for Doctor's Qualifcation
        self.qualification = new_qualification

    def getRoomNumber(self): #Getter for Doctor's Room Number
        return self.room_number

    def setRoomNumber(self, new_room_number): #Setters for Doctor's Room Number
        self.room_number = new_room_number

    def __str__(self): #Formats the Data for the text file
        return f"{self.doctor_id}_{self.name}_{self.specialization}_{self.working_time}_{self.qualification}_{self.room_number}"


class DoctorManager:
    #Constructor
    def __init__(self):
        self.doctors = [] #empty list
        self.readDoctorsFile() #Refers to method in the class to read the file

    def formatDrInfo(self, doctor):
        return str(doctor) #Double checks things are strings

    def enterDrInfo(self): #Gets called when adding new Doctor to the file
        doctor_id = input("Enter the doctor's ID: ")
        name = input("Enter the doctor's name: ")
        speciality = input("Enter the doctor's speciality: ")
        working_time = input("Enter the doctor's timing (e.g., 7am-10pm): ")
        qualification = input("Enter the doctor's qualification: ")
        room_number = input("Enter the doctor's room number: ")
        return Doctor(doctor_id, name, speciality, working_time, qualification, room_number) #adds it to the doctor class

    def readDoctorsFile(self): #Reads the Doctor File
        with open("doctors.txt", "r") as file:
            next(file)  # Skip header
            for line in file:
                doctor_info = line.strip().split("_")
                self.doctors.append(Doctor(*doctor_info)) #adds it to the List

    def searchDoctorById(self): #Searches for Doctor by ID
        doctor_id = input("Enter the doctor Id: ")
        for doctor in self.doctors: #Checks the list
            if doctor.getDoctorId() == doctor_id:
                self.displayDoctorInfo(doctor)
                return
        print("Can't find the doctor with the same ID on the system")

    def searchDoctorByName(self):#Searches for Doctor by Name
        name = input("Enter the doctor name: ")
        for doctor in self.doctors:#Checks the list
            if doctor.getName().lower() == name.lower(): #Takes capitalization into account
                self.displayDoctorInfo(doctor)
                return
        print("Can't find the doctor with the same name on the system")

    def displayDoctorInfo(self, doctor):
        print("\nId   Name                   Speciality      Timing          Qualification   Room Number")
        print(f"\n{doctor.getDoctorId():<5}{doctor.getName():<22}{doctor.getSpecialization():<15}{doctor.getWorkingTime():<15}{doctor.getQualification():<15}{doctor.getRoomNumber():<5}")

    def editDoctorInfo(self): #Edits Doctor Info
        doctor_id = input("Please enter the id of the doctor that you want to edit their information: ")
        for doctor in self.doctors: #Checksthe List
            if doctor.getDoctorId() == doctor_id:
                doctor.setName(input("Enter new Name: "))
                doctor.setSpecialization(input("Enter new Specialist in: "))
                doctor.setWorkingTime(input("Enter new Timing: "))
                doctor.setQualification(input("Enter new Qualification: "))
                doctor.setRoomNumber(input("Enter new Room number: "))
                self.writeListOfDoctorsToFile()
                print(f"\nDoctor whose ID is {doctor_id} has been edited")
                return
        print("Cannot find the doctor .....")

    def displayDoctorsList(self):
        print("Id   Name                   Speciality      Timing          Qualification   Room Number")
        for doctor in self.doctors:
            print(f"\n{doctor.getDoctorId():<5}{doctor.getName():<23}{doctor.getSpecialization():<16}{doctor.getWorkingTime():<16}{doctor.getQualification():<16}{doctor.getRoomNumber()}")

    def writeListOfDoctorsToFile(self): #Writes the List into the file
        with open("doctors.txt", "w") as file:
            file.write("id_name_specilist_timing_qualification_roomNb\n")
            for doctor in self.doctors:
                file.write(self.formatDrInfo(doctor) + "\n")

    def addDrToFile(self):
        new_doctor = self.enterDrInfo()#Calls the method to enter info
        self.doctors.append(new_doctor)#Adds the info into the list
        self.writeListOfDoctorsToFile()#Adds the List into the file
        print(f"\nDoctor whose ID is {new_doctor.getDoctorId()} has been added")

class Patient:
    #Constructor
    def __init__(self, pid="", name="", disease="", gender="", age=""):
        self.pid = pid
        self.name = name
        self.disease = disease
        self.gender = gender
        self.age = age

    #Getters and Setters
    def getPid(self):
        return self.pid

    def setPid(self, new_pid):
        self.pid = new_pid

    def getName(self):
        return self.name

    def setName(self, new_name):
        self.name = new_name

    def getDisease(self):
        return self.disease

    def setDisease(self, new_disease):
        self.disease = new_disease

    def getGender(self):
        return self.gender

    def setGender(self, new_gender):
        self.gender = new_gender

    def getAge(self):
        return self.age

    def setAge(self, new_age):
        self.age = new_age

    #Formats the Data for the text file
    def __str__(self):
        return f"{self.pid}_{self.name}_{self.disease}_{self.gender}_{self.age}"

class PatientManager:
    def __init__(self):
        self.patients = []
        self.read_patients_file()

    def format_patient_Info_for_file(self, patient):
        # Formats patient information into the proper string format
        return str(patient)

    def enter_patient_iInfo(self):
        # Asks the user to enter the patient info and creates a Patient object
        pid = input("Enter patient ID: ")
        name = input("Enter patient name: ")
        disease = input("Enter patient disease: ")
        gender = input("Enter patient gender: ")
        age = input("Enter patient age: ")
        return Patient(pid, name, disease, gender, age)

    def read_patients_file(self):
        # Reads the patients.txt file and fills the patients list
        with open("patients.txt", "r") as file:
            next(file)  # Skip header
            for line in file:
                patient_info = line.strip().split("_")
                self.patients.append(Patient(*patient_info))

    def search_patient_by_Id(self):
        # Searches for a patient by ID and displays their information
        patient_id = input("Enter the patient Id: ")
        for patient in self.patients:
            if patient.getPid() == patient_id:
                self.display_patient_info(patient)
                return
        print("Can't find the patient with the same id on the system")

    def display_patient_info(self, patient):
        # Displays patient information on the screen
        print("\nId         Name                  Disease    Gender      Age")
        print(f"{patient.getPid():<11}{patient.getName():<21}{patient.getDisease():<11}{patient.getGender():<11}{patient.getAge():<3}")

    def edit_patient_info_by_id(self):
        # Asks the user to enter the patient id and the new patient information
        patient_id = input("Please enter the id of the patient that you want to edit their information: ")
        for patient in self.patients:
            if patient.getPid() == patient_id:
                patient.setName(input("Enter new Name: "))
                patient.setDisease(input("Enter new disease: "))
                patient.setGender(input("Enter new gender: "))
                patient.setAge(input("Enter new age: "))
                self.write_list_of_patients_to_file()
                print(f"\nPatient whose ID is {patient_id} has been edited")
                return
        print("Cannot find the patient.....")

    def display_patients_list(self):
        # Displays the list of patients
        print("Id         Name                  Disease    Gender      Age")
        for patient in self.patients:
            print(f"{patient.getPid():<11}{patient.getName():<21}{patient.getDisease():<11}{patient.getGender():<11}{patient.getAge():<3}")

    def write_list_of_patients_to_file(self):
        # Writes the list of patients to the patients.txt file
        with open("patients.txt", "w") as file:
            file.write("id_name_disease_gender_age\n")
            for patient in self.patients:
                file.write(self.format_patient_Info_for_file(patient) + "\n")

    def add_patient_to_file(self):
        # Adds a new patient to the file and the patients list
        new_patient = self.enter_patient_iInfo()
        self.patients.append(new_patient)
        self.write_list_of_patients_to_file()
        print(f"\nPatient whose ID is {new_patient.getPid()} has been added")

class Management:
    #Constructor
    def __init__(self):
        self.doctor_manager = DoctorManager()
        self.patient_manager = PatientManager()

    def displayMenu(self):
        while True:
            print("\nWelcome to Alberta Hospital (AH) Management system")
            print("Select from the following options, or select 3 to stop:")
            print("1 -  Doctors")
            print("2 -  Patients")
            print("3 -  Exit Program")
            choice = input(">>> ") # Mutiple print to make it easier to read

            if choice == "1":
                self.doctorsMenu() # refers to the method in DoctorManager
            elif choice == "2":
                self.patientsMenu() # refers to the method in PatientrManager
            elif choice == "3": # Exits
                print("Thanks for using the program. Bye!")
                break
            else: #Re-enters the loop
                print("Invalid option, please try again.")

    def doctorsMenu(self):
        while True:
            print("\nDoctors Menu:")
            print("1 - Display Doctors list")
            print("2 - Search for doctor by ID")
            print("3 - Search for doctor by name")
            print("4 - Add doctor")
            print("5 - Edit doctor info")
            print("6 - Back to the Main Menu")
            choice = input(">>> ") #Mutiple print to make it easier to read

            if choice == "1":
                self.doctor_manager.displayDoctorsList()#refers to the method in DoctorManager
            elif choice == "2":
                self.doctor_manager.searchDoctorById()#refers to the method in DoctorManager
            elif choice == "3":
                self.doctor_manager.searchDoctorByName()#refers to the method in DoctorManager
            elif choice == "4":
                self.doctor_manager.addDrToFile()#refers to the method in DoctorManager
            elif choice == "5":
                self.doctor_manager.editDoctorInfo()#refers to the method in DoctorManager
            elif choice == "6":
                break
            else:
                print("Invalid option, please try again.")

    def patientsMenu(self):
        while True:
            print("\nPatients Menu:")
            print("1 - Display patients list")
            print("2 - Search for patient by ID")
            print("3 - Add patient")
            print("4 - Edit patient info")
            print("5 - Back to the Main Menu")
            choice = input(">>> ")

            if choice == "1":
                self.patient_manager.display_patients_list()
            elif choice == "2":
                self.patient_manager.search_patient_by_Id()
            elif choice == "3":
                self.patient_manager.add_patient_to_file()
            elif choice == "4":
                self.patient_manager.edit_patient_info_by_id()
            elif choice == "5":
                break
            else:
                print("Invalid option, please try again.")

#Main
hospital_management = Management()
hospital_management.displayMenu()